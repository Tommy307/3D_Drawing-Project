#include<iostream>
#include<cmath>
#include<string>
#include<vector>
#include<stack>
#include<fstream>
#include<stdlib.h>

#define MAX 50                                                  //输入最大字符数
#define OFFSET y/I                             				//坐标系统转换惯量
using namespace std;

ofstream out("3DD.html");
double I=8;
bool check=0;													//自变量有无意义的判定值
double range=250;  												//x在html中的绝对范围
double rangey=250;												//y在html中的绝对范围
double range_dived;												//x的频率                                             
double dived=15/range;                                                   //自变量之间的间隔的适应参数
double divisor=1;                                                 //因变量大小适应参数                                                                                                       //自变量的绝对范围
double z_temp;                                                  //因变量容器
double the_number;
int numb=0;
vector<string> color={"0000FF","00FF00","FF0000","F000F0","00F0F0","606000",
					  "600060","006060","903000","900030","009030","309000",
					  "300090","003090","0F3300","33000F","00300F","000F30"};
const int num=8;                                                //操作符的个数
string function; 												//输入中的函数
double atoi_(string s){
	double num=0;
	for(int i=0;i<s.size();++i){
		if(s[i]=='.') return -1;
		num=s[i]-'0'+num*10;
	}
	return num;
}
//-------------------------------------------读取函数部分----------------------------------------------------------------
double change(string ,int ,int );
double f(string,double,double,double);
struct A{
	A():place(0),f(0){}
    int place;
    char c;
    double f;};
const int desk[num][num]={   
//        +  -  *  /  (  )  ^  #
/*+*/   { 1, 1,-1,-1,-1, 1,-1, 1},
/*-*/   { 1, 1,-1,-1,-1, 1,-1, 1},
/***/   { 1, 1, 1, 1,-1, 1,-1, 1},
/*/*/   { 1, 1, 1, 1,-1, 1,-1, 1},
/*(*/   {-1,-1,-1,-1,-1, 0,-1, 2},
/*)*/   { 2, 2, 2, 2, 2, 2, 2, 2},
/*^*/   { 1, 1, 1, 1,-1, 1, 1, 1},
/*#*/   {-1,-1,-1,-1,-1, 2,-1, 3}};
string & cl(string & str){
    int index = 0;
    if(!str.empty())while((index=str.find(' ',index))!=string::npos)str.erase(index,1);
    return str;}   
 
void func(string& strin,string funcname,int &i,int &n,A* arr,double (*function)(double),double x,double y,double z){
	int j;
	double t;
	if(strin[i+funcname.length()]=='(')
	{
		int high=0;
		for(j=i+funcname.length();high||j==i+funcname.length();j++)
		{
			if(strin[j]=='(')
				high++;
			if(strin[j]==')')
				high--;
		}
		arr[n].place=2;
		t=f(strin.substr(i+funcname.length()+1,j-i-funcname.length()-2),x,y,z);
		n++;
		i=j-1;
	}
	else if(strin[i+funcname.length()]=='x'||strin[i+funcname.length()]=='X')
	{
		arr[n].place=2;
		t=x;
		n++;
		i=i+funcname.length();
	}
	else if(strin[i+funcname.length()]=='y'||strin[i+funcname.length()]=='Y')
	{
		arr[n].place=2;
		t=y;
		n++;
		i=i+funcname.length();	
	}
	else if(strin[i+funcname.length()]=='z'||strin[i+funcname.length()]=='Z')
	{
		arr[n].place=2;
		t=z;
		n++;
		i=i+funcname.length();	
	}	
	else if(strin[i+funcname.length()]>='0'&&strin[i+funcname.length()]<='9')
	{
		arr[n].place=2;
		for(j=i+funcname.length();(j<=strin.length()-1)&&((strin[j]>='0'&&strin[j]<='9')||(strin[j]=='.'));j++);j--;
		t=change(strin,i+funcname.length(),j);
		n++;
		i=j;
	}
	if(funcname=="ln"||funcname=="log"){if(t<=0)check=1;}
	if(funcname=="arcsin"||funcname=="arccos"){if(t>1||t<-1)check=1;}
	if(check==0) arr[n-1].f=function(t);}
double change(string str,int head,int tail){
    int point=-1;
    double sun=0,e=1;
    for(int i=head;i<=tail;i++)
    {
        if(str[i]=='.')
        {
            point=1;
            continue;
        }
        if(point==-1)
            sun=sun*10+str[i]-'0';
        else
            sun=sun+(str[i]-'0')*(e/=10);
    }
    return sun;}

void getscri(int& a,char b){
    switch(b)
    {
        case '+':a--;
        case '-':a--;
        case '*':a--;
        case '/':a--;
        case '(':a--;
        case ')':a--;
        case '^':a--;
        case '#':a--;break;
        default:a=-1;
    }   }

double f(string strin,double x,double y,double z){
	A arr[MAX];
	strin=strin+"#";
	stack<char> zhan;
	zhan.push('#');	
	int n=0,j;
	int a,b;
	int high=0;
	int i=0;
	if(strin[0]=='-')
	{
		if(strin[1]=='(')
		{
			for(j=1;(j==1)||high;j++)
			{
				if(strin[j]=='(')
					high++;
				if(strin[j]==')')
					high--;
			}
			arr[n].place=2;
			arr[n].f=-f(strin.substr(2,j-2),x,y,z);
			n++;
			i=j; 
		} 
		if(strin[1]=='x'||strin[1]=='X')
		{
			arr[n].place=2;
			arr[n].f=-x;
			n++;
			i=2;
		}
		if(strin[1]=='y'||strin[1]=='Y')
		{
			arr[n].place=2;
			arr[n].f=-y;
			n++;
			i=2;
		}
		if(strin[1]>='0'&&strin[1]<='9')
		{
			arr[n].place=2;
			for(j=1;(j<=strin.length()-1)&&((strin[j]>='0'&&strin[j]<='9')||(strin[j]=='.'));j++);j--;
			arr[n].f=-change(strin,1,j);
			n++;
			i=j+1;
		}
	}
	for(;i<=strin.length()-1&&(!check);i++)
	{
		if(strin[i]=='(')
		{
			for(j=i;(j==i)||high;j++)
			{
				if(strin[j]=='(')
					high++;
				if(strin[j]==')')
					high--;
			}
			arr[n].place=2;
			if(j==i+2)
				arr[n].f=0;
			else
				arr[n].f=f(strin.substr(i+1,j-2-i),x,y,z);
			n++;
			i=j-1;
			continue;
		}
		a=num;b=num;
		getscri(a,strin[i]);
		if(a==-1)
		{
			if(strin[i]=='x'||strin[i]=='X')
			{
				arr[n].place=2;
				arr[n].f=x;
				n++;
				continue;
			}
			if(strin[i]=='y'||strin[i]=='Y')
			{
				arr[n].place=2;
				arr[n].f=y;
				n++;
				continue;
			} 
			if(strin[i]>='0'&&strin[i]<='9')
			{
				arr[n].place=2;
				for(j=i;(j<=strin.length()-1)&&((strin[j]>='0'&&strin[j]<='9')||(strin[j]=='.'));j++);j--;
				arr[n].f=change(strin,i,j);
				n++;
				i=j;
				continue;
			}
			if(strin.substr(i,3)=="sin"){func(strin,"sin",i,n,arr,sin,x,y,z);continue;}
			if(strin.substr(i,3)=="cos"){func(strin,"cos",i,n,arr,cos,x,y,z);continue;}
			if(strin.substr(i,3)=="tan"){func(strin,"tan",i,n,arr,tan,x,y,z);continue;}
			if(strin.substr(i,6)=="arcsin"){func(strin,"arcsin",i,n,arr,asin,x,y,z);continue;}
			if(strin.substr(i,6)=="arccos"){func(strin,"arccos",i,n,arr,acos,x,y,z);continue;}
			if(strin.substr(i,6)=="arctan"){func(strin,"arctan",i,n,arr,atan,x,y,z);continue;}
			if(strin.substr(i,2)=="ln"){func(strin,"ln",i,n,arr,log,x,y,z);continue;}
			if(strin.substr(i,3)=="log"){func(strin,"log",i,n,arr,log10,x,y,z);continue;}
			if(strin.substr(i,4)=="sinh"){func(strin,"sinh",i,n,arr,sinh,x,y,z);continue;}
			if(strin.substr(i,4)=="cosh"){func(strin,"cosh",i,n,arr,cosh,x,y,z);continue;}
			if(strin.substr(i,4)=="tanh"){func(strin,"tanh",i,n,arr,tanh,x,y,z);continue;}
			if(strin.substr(i,3)=="abs"){func(strin,"abs",i,n,arr,abs,x,y,z);continue;}
		}
		getscri(b,zhan.top());
		if(desk[b][a]==1)
		{
			arr[n].place=1;
			arr[n].c=zhan.top();
			zhan.pop();
			n++;
			i--;
		}
		if(desk[b][a]==-1)
			zhan.push(strin[i]);
		if(desk[b][a]==0)
			zhan.pop();	
	}
	for(int i=0;arr[i].place&&!check;i++)
	{
		if(arr[i].place==1)
		{
				switch(arr[i].c)
				{
					case '+':arr[i-2].f=arr[i-2].f+arr[i-1].f;break;
					case '-':arr[i-2].f=arr[i-2].f-arr[i-1].f;break;
					case '*':arr[i-2].f=arr[i-2].f*arr[i-1].f;break;
					case '/':if(arr[i-1].f==0){check=1;return 0;}arr[i-2].f=arr[i-2].f/arr[i-1].f;break;
					case '^':arr[i-2].f=pow(arr[i-2].f,arr[i-1].f);break; 
				}
				for(j=i+1;arr[j].place;j++)
					arr[j-2]=arr[j];
				arr[j-2].place=0;
				i-=2;			
		}
	}
	if(check)return 0;
	return arr[0].f;}



//--------------------------------------------------读取函数的部分-------------------------------------------------------------
//--------------------------------------------------svg码输出部分--------------------------------------------------------------
void out_co_ax(){
	if(numb) return;
	int rd=range_dived*10;
	for(int x=0;x<=11*range/6;x+=rd){
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=0.6 x1="<<x<<" x2="<<x<<" y1=0 y2=-5></line>"<<endl;	
	out<<"<text font-size=12 fill=#000000 x="<<x-rd/3<<" y=13>"<<x*dived<<"</text>"<<endl;
	if(x!=0){
	out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=0.6 x1=0 x2=5 y1="<<x<<" y2="<<x<<"></line>"<<endl;
	out<<"<text font-size=12 fill=#000000 x=10 y="<<x<<">"<<-x*divisor<<"</text>"<<endl;
		}
	}
	for(int x=-rd;x>=-11*range/6;x-=rd){
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=0.6 x1="<<x<<" x2="<<x<<" y1=0 y2=-5></line>"<<endl;	
	out<<"<text font-size=12 fill=#000000 x="<<x-rd/3<<" y=13>"<<x*dived<<"</text>"<<endl;
	out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=0.6 x1=0 x2=5 y1="<<x<<" y2="<<x<<"></line>"<<endl;	
	out<<"<text font-size=12 fill=#000000 x=10 y="<<x<<">"<<-x*divisor<<"</text>"<<endl;
	}
	int rdy=rangey/10;
	if(rangey){
	for(int y=rdy;y<=rangey;y+=rdy){
		double yy=y/1.414;
		out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=0.6 x1="<<-yy<<" x2="<<-yy-5<<" y1="<<yy<<" y2="<<yy<<"></line>"<<endl;	
		out<<"<text font-size=10 fill=#000000 x="<<-yy+5<<" y="<<yy<<">"<<y*dived<<"</text>"<<endl;
	}
	for(int y=-rdy;y>=-rangey;y-=rdy){
		double yy=y/1.414;
		out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=0.6 x1="<<-yy<<" x2="<<-yy-5<<" y1="<<yy<<" y2="<<yy<<"></line>"<<endl;	
		out<<"<text font-size=10 fill=#000000 x="<<-yy+5<<" y="<<yy<<">"<<y*dived<<"</text>"<<endl;
	}}
}
void out_coordinate(double x,double y){
    if(x>range) return;
    double z=f(function,x*dived,y*dived,0)/divisor;
	if(check){
		check=0;
		x+=5;
		z_temp=f(function,(x+1)*dived,y*dived,0)/divisor;
		out_coordinate(x+range_dived,y);
		return ;
	}
    out<<"<line stroke=#"<<color[numb]<<" stroke-width=1 stroke-opacity=0.6 x1="<<x-range_dived-OFFSET<<" x2="<<x-OFFSET<<" y1="<<z_temp-OFFSET<<" y2="<<z-OFFSET<<"></line>"<<endl;
    z_temp=z;
    out_coordinate(x+range_dived,y);} 

double f_max(double y){
	double max=0;
	for(int i=0;i<400;++i){
	double temp=f(function,(-range+((range*i/200)))*dived,y*dived,0);
	if(!check){
		if(temp<0) temp*=-1;
		if(temp>max) max=temp;
	}
	else check=0;
	}
	return max;}

void test(){
    cl(function);

	if(rangey==0){
		the_number=100;
		out<<"<text font-size=25 x="<<650-function.size()*14<<" y="<<-480+numb*25<<" fill=#"<<color[numb]<<">y="<<function<<"</text>"<<endl;
		range=400;
		range_dived=range/the_number;
		divisor=-f_max(0)/200;
		z_temp=f(function,-range*dived,0,0)/divisor;
		out_coordinate(-range+range_dived,0);
		out_co_ax();
		++numb;
		return ;
	}
	the_number=60;
	out<<"<text font-size=25 x="<<650-function.size()*14<<" y="<<-480+numb*25<<" fill=#"<<color[numb]<<">z="<<function<<"</text>"<<endl;
	range=250;
	range_dived=range/the_number;
	double f_max_max=0;
	for(int y=-rangey;y<rangey;y+=rangey/100){
		double temp=f_max(y);
		if(temp>f_max_max) f_max_max=temp;
	}
	divisor=-f_max_max/400;
	for(int i=0;i<100;++i){
		double y=-rangey+5*i;
		z_temp=f(function,-range*dived,y*dived,0)/divisor;
		out_coordinate(-range+range_dived,y);
	}
	out_co_ax();
	++numb;
}
void out_head_coordinate_line(){
    out<<"<svg width=1300 height=1000>"<<endl;
    out<<"<g transform=translate(600,500)>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=-625 y1=0 x2=575 y2=0></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=0 y1=500 x2=0 y2=-500></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=390 y1=-370 x2=-390 y2=370></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=570 y1=5 x2=575 y2=0></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=570 y1=-5 x2=575 y2=0></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=0 y1=-500 x2=5 y2=-495></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=0 y1=-500 x2=-5 y2=-495></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=-388 y1=359 x2=-390 y2=370></line>"<<endl;
    out<<"<line stroke=#000000 stroke-width=1 stroke-opacity=1 x1=-381 y1=368 x2=-390 y2=370></line>"<<endl;}  
	//界定视图范围，转换坐标原点，画出坐标轴。

//---------------------------------------------------svg码输出部分------------------------------------------------------------

int main(){
	system("mode con cols=110 lines=30");
	system("color F0");
	system("title 3D-Drawing for windows");

	cout<<"Please input your function in only one line,and only contains x or x and y!"<<endl;
	cout<<"Please don't input =, and also if you want to use multiple you must take a * !"<<endl;
	out_head_coordinate_line();                     //输出svg代码头部。
	
	while(1){
		getline(cin,function);
		if(function.find('y')==function.find('(')) rangey=0;
		if(function.size()==0) break;
		else test();
		cout<<"If you still want to input another funtion ,then do it.Or you just press Enter!"<<endl;
		function.erase();
	}												//进行递归计算坐标，输出svg代码

	out<<"</g>"<<endl;
    out<<"</svg>";
	out.close();
	cout<<"ads";
	system("3DD.html");
}


